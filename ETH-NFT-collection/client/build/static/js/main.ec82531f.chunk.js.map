{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","RARIBLE_LINK","override","css","App","useState","currentAccount","setCurrentAccount","currentTokens","setCurrentTokens","MintingFlg","setMintingFlg","checkIfWalletIsConnected","window","ethereum","console","log","request","method","alert","accounts","length","account","setupEventListener","connectWallet","chainId","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","totalSupply","total","toNumber","on","from","tokenId","useEffect","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","className","onClick","color","loading","size","href","alt","src","twitterLogo","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec82531f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { css } from \"@emotion/react\";\nimport { ethers } from \"ethers\";\nimport MoonLoader from \"react-spinners/MoonLoader\";\nimport myEpicNft from \"./artifacts/contracts/MashNFT.sol/MashNFT.json\";\n\n// Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\nconst TWITTER_HANDLE = 'HARUKI05758694';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x9327a0fCaFe14aAafBEE80BBD0799Cb2BEAFaeC5\";\nconst OPENSEA_LINK = `https://testnets.opensea.io/collections`;\nconst RARIBLE_LINK = `https://rinkeby.rarible.com/collection/${CONTRACT_ADDRESS}/items`;\n// スピナー用の変数\nconst override = css`\n  display: block;\n  margin: 0 auto;\n`;\n\nconst App = () => {\n  // ステート変数\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [currentTokens, setCurrentTokens] = useState(0);\n  const [MintingFlg, setMintingFlg] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n    // Chain Idを取得する。\n    let chainId = await ethereum.request({ method: \"eth_chainId\" });\n    if (chainId !== \"0x4\") {\n      alert(\"You are not connected to the Rinkeby Test Network!\");\n    } else {\n      // アカウント情報を取得する。\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        // イベントリスナーの設定\n        setupEventListener();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    }\n  };\n\n  // connect walletボタンを押した時の処理\n  const connectWallet = async () => {\n    try {\n      \n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      \n      // 接続しているチェーンが Rinkebyであることを確認する。\n      let chainId = await ethereum.request({ method: \"eth_chainId\" });\n      console.log(\"Connected to chain \" + chainId);\n      \n      if (chainId !== \"0x4\") {\n        alert(\"You are not connected to the Rinkeby Test Network!\");\n      } else {\n        const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n        console.log(\"Connected: \", accounts[0]);\n        // ステート変数の情報を更新する。\n        setCurrentAccount(accounts[0]);\n        // イベントリスナーの設定\n        setupEventListener();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // イベントリスナー用のメソッド\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n        // 現在の発行数を取得する。\n        let total = await connectedContract.totalSupply();\n        setCurrentTokens(total.toNumber());\n        // NewEpicNFTMintedが発行されるのを待つ\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `NFT を発行しました！ OpenSea に表示されるまで最大で10分かかることがあります。NFT へのリンクはこちらです: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // ConnectWalletメソッド\n  const ConnectWallet = () => (\n    <button className=\"cta-button connect-wallet-button\" onClick={connectWallet}>\n      Connect to Wallet\n    </button>\n  );\n\n  // Mintボタンを押した時の処理!!\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n          // コントラクトを利用する準備を実施する。\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const connectedContract = new ethers.Contract(\n            CONTRACT_ADDRESS,\n            myEpicNft.abi,\n            signer\n          );\n            \n          console.log(\"Going to pop wallet now to pay gas...\");\n          let nftTxn = await connectedContract.makeAnEpicNFT();\n          setMintingFlg(true);\n          console.log(\"Mining...please wait.\");\n          await nftTxn.wait();\n        \n          console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n          setMintingFlg(false);\n      } else {\n          console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Mash NFT Mint</p>\n          <p className=\"sub-text\">\n           我が家の愛犬の NFT を Mint します！！💫\n          </p>\n          <p className=\"mint-count\">\n            発行状況：  {currentTokens} / {TOTAL_MINT_COUNT}\n          </p>\n          {currentAccount === \"\" && currentTokens <= TOTAL_MINT_COUNT\n            ? \n              ConnectWallet() \n            :  \n              (\n                /* ユーザーが Mint NFT ボタンを押した時に、askContractToMintNft 関数を呼び出します　*/\n                <button \n                  onClick={askContractToMintNft} \n                  className=\"cta-button connect-wallet-button\"\n                >\n                  Let's Mint NFT\n                </button>\n              )\n          }\n        </div>\n        { MintingFlg ?\n            (\n              <div>\n                <MoonLoader color=\"white\" loading={MintingFlg} css={override} size={60} /><br/>\n                <div className=\"spin-color\">\n                  Now Minting ...\n                </div>\n              </div>\n            ) :<></>\n        }\n        <div className=\"button-show\">\n        <button className=\"opensea-button cta-button\">\n          <a href={OPENSEA_LINK}>\n            OpenSeaでNFTを見る\n          </a>\n        </button>\n        <br/>\n        <button className=\"rarible-button cta-button\">\n          <a href={RARIBLE_LINK}>\n            RaribleでNFTを見る\n          </a>\n        </button>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {`built on @${TWITTER_HANDLE}`}\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}